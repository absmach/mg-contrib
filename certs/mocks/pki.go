// Code generated by mockery v2.43.2. DO NOT EDIT.

// Copyright (c) Abstract Machines

package mocks

import (
	context "context"

	pki "github.com/absmach/magistrala/certs/pki"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Agent is an autogenerated mock type for the Agent type
type Agent struct {
	mock.Mock
}

// IssueCert provides a mock function with given fields: cn, ttl
func (_m *Agent) IssueCert(cn string, ttl string) (pki.Cert, error) {
	ret := _m.Called(cn, ttl)

	if len(ret) == 0 {
		panic("no return value specified for IssueCert")
	}

	var r0 pki.Cert
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (pki.Cert, error)); ok {
		return rf(cn, ttl)
	}
	if rf, ok := ret.Get(0).(func(string, string) pki.Cert); ok {
		r0 = rf(cn, ttl)
	} else {
		r0 = ret.Get(0).(pki.Cert)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(cn, ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginAndRenew provides a mock function with given fields: ctx
func (_m *Agent) LoginAndRenew(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LoginAndRenew")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: serial
func (_m *Agent) Read(serial string) (pki.Cert, error) {
	ret := _m.Called(serial)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 pki.Cert
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (pki.Cert, error)); ok {
		return rf(serial)
	}
	if rf, ok := ret.Get(0).(func(string) pki.Cert); ok {
		r0 = rf(serial)
	} else {
		r0 = ret.Get(0).(pki.Cert)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serial)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Revoke provides a mock function with given fields: serial
func (_m *Agent) Revoke(serial string) (time.Time, error) {
	ret := _m.Called(serial)

	if len(ret) == 0 {
		panic("no return value specified for Revoke")
	}

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (time.Time, error)); ok {
		return rf(serial)
	}
	if rf, ok := ret.Get(0).(func(string) time.Time); ok {
		r0 = rf(serial)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serial)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAgent creates a new instance of Agent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgent(t interface {
	mock.TestingT
	Cleanup(func())
}) *Agent {
	mock := &Agent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
